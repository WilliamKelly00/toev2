// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: toe/qna.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Qna struct {
	Index       string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Qsh         string `protobuf:"bytes,2,opt,name=qsh,proto3" json:"qsh,omitempty"`
	ParentTopic string `protobuf:"bytes,3,opt,name=parentTopic,proto3" json:"parentTopic,omitempty"`
	Question    string `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	OpA         string `protobuf:"bytes,5,opt,name=opA,proto3" json:"opA,omitempty"`
	OpB         string `protobuf:"bytes,6,opt,name=opB,proto3" json:"opB,omitempty"`
	OpC         string `protobuf:"bytes,7,opt,name=opC,proto3" json:"opC,omitempty"`
	OpD         string `protobuf:"bytes,8,opt,name=opD,proto3" json:"opD,omitempty"`
	Reward      string `protobuf:"bytes,9,opt,name=reward,proto3" json:"reward,omitempty"`
	Owner       string `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Qna) Reset()         { *m = Qna{} }
func (m *Qna) String() string { return proto.CompactTextString(m) }
func (*Qna) ProtoMessage()    {}
func (*Qna) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6850ffad99ef1c7, []int{0}
}
func (m *Qna) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Qna) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Qna.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Qna) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Qna.Merge(m, src)
}
func (m *Qna) XXX_Size() int {
	return m.Size()
}
func (m *Qna) XXX_DiscardUnknown() {
	xxx_messageInfo_Qna.DiscardUnknown(m)
}

var xxx_messageInfo_Qna proto.InternalMessageInfo

func (m *Qna) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Qna) GetQsh() string {
	if m != nil {
		return m.Qsh
	}
	return ""
}

func (m *Qna) GetParentTopic() string {
	if m != nil {
		return m.ParentTopic
	}
	return ""
}

func (m *Qna) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func (m *Qna) GetOpA() string {
	if m != nil {
		return m.OpA
	}
	return ""
}

func (m *Qna) GetOpB() string {
	if m != nil {
		return m.OpB
	}
	return ""
}

func (m *Qna) GetOpC() string {
	if m != nil {
		return m.OpC
	}
	return ""
}

func (m *Qna) GetOpD() string {
	if m != nil {
		return m.OpD
	}
	return ""
}

func (m *Qna) GetReward() string {
	if m != nil {
		return m.Reward
	}
	return ""
}

func (m *Qna) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*Qna)(nil), "WilliamKelly00.toev2.toe.Qna")
}

func init() { proto.RegisterFile("toe/qna.proto", fileDescriptor_f6850ffad99ef1c7) }

var fileDescriptor_f6850ffad99ef1c7 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0xc9, 0x4f, 0xd5,
	0x2f, 0xcc, 0x4b, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x08, 0xcf, 0xcc, 0xc9, 0xc9,
	0x4c, 0xcc, 0xf5, 0x4e, 0xcd, 0xc9, 0xa9, 0x34, 0x30, 0xd0, 0x2b, 0xc9, 0x4f, 0x2d, 0x33, 0x02,
	0x91, 0x4a, 0x0f, 0x19, 0xb9, 0x98, 0x03, 0xf3, 0x12, 0x85, 0x44, 0xb8, 0x58, 0x33, 0xf3, 0x52,
	0x52, 0x2b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x21, 0x01, 0x2e, 0xe6, 0xc2,
	0xe2, 0x0c, 0x09, 0x26, 0xb0, 0x18, 0x88, 0x29, 0xa4, 0xc0, 0xc5, 0x5d, 0x90, 0x58, 0x94, 0x9a,
	0x57, 0x12, 0x92, 0x5f, 0x90, 0x99, 0x2c, 0xc1, 0x0c, 0x96, 0x41, 0x16, 0x12, 0x92, 0xe2, 0xe2,
	0x28, 0x2c, 0x4d, 0x2d, 0x2e, 0xc9, 0xcc, 0xcf, 0x93, 0x60, 0x01, 0x4b, 0xc3, 0xf9, 0x20, 0xf3,
	0xf2, 0x0b, 0x1c, 0x25, 0x58, 0x21, 0xe6, 0xe5, 0x17, 0x38, 0x42, 0x44, 0x9c, 0x24, 0xd8, 0x60,
	0x22, 0x4e, 0x10, 0x11, 0x67, 0x09, 0x76, 0x98, 0x88, 0x33, 0x44, 0xc4, 0x45, 0x82, 0x03, 0x26,
	0xe2, 0x22, 0x24, 0xc6, 0xc5, 0x56, 0x94, 0x5a, 0x9e, 0x58, 0x94, 0x22, 0xc1, 0x09, 0x16, 0x84,
	0xf2, 0x40, 0xbe, 0xc8, 0x2f, 0xcf, 0x4b, 0x2d, 0x92, 0xe0, 0x82, 0xf8, 0x02, 0xcc, 0x71, 0x72,
	0x3d, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96,
	0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xed, 0xf4, 0xcc, 0x92, 0x8c,
	0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0xd4, 0x20, 0xd2, 0x07, 0x07, 0x91, 0x7e, 0x05, 0x88,
	0xd6, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x87, 0xa5, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x1c, 0xd8, 0x6b, 0x78, 0x5c, 0x01, 0x00, 0x00,
}

func (m *Qna) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Qna) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Qna) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQna(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Reward) > 0 {
		i -= len(m.Reward)
		copy(dAtA[i:], m.Reward)
		i = encodeVarintQna(dAtA, i, uint64(len(m.Reward)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OpD) > 0 {
		i -= len(m.OpD)
		copy(dAtA[i:], m.OpD)
		i = encodeVarintQna(dAtA, i, uint64(len(m.OpD)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OpC) > 0 {
		i -= len(m.OpC)
		copy(dAtA[i:], m.OpC)
		i = encodeVarintQna(dAtA, i, uint64(len(m.OpC)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OpB) > 0 {
		i -= len(m.OpB)
		copy(dAtA[i:], m.OpB)
		i = encodeVarintQna(dAtA, i, uint64(len(m.OpB)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OpA) > 0 {
		i -= len(m.OpA)
		copy(dAtA[i:], m.OpA)
		i = encodeVarintQna(dAtA, i, uint64(len(m.OpA)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Question) > 0 {
		i -= len(m.Question)
		copy(dAtA[i:], m.Question)
		i = encodeVarintQna(dAtA, i, uint64(len(m.Question)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParentTopic) > 0 {
		i -= len(m.ParentTopic)
		copy(dAtA[i:], m.ParentTopic)
		i = encodeVarintQna(dAtA, i, uint64(len(m.ParentTopic)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Qsh) > 0 {
		i -= len(m.Qsh)
		copy(dAtA[i:], m.Qsh)
		i = encodeVarintQna(dAtA, i, uint64(len(m.Qsh)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQna(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQna(dAtA []byte, offset int, v uint64) int {
	offset -= sovQna(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Qna) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQna(uint64(l))
	}
	l = len(m.Qsh)
	if l > 0 {
		n += 1 + l + sovQna(uint64(l))
	}
	l = len(m.ParentTopic)
	if l > 0 {
		n += 1 + l + sovQna(uint64(l))
	}
	l = len(m.Question)
	if l > 0 {
		n += 1 + l + sovQna(uint64(l))
	}
	l = len(m.OpA)
	if l > 0 {
		n += 1 + l + sovQna(uint64(l))
	}
	l = len(m.OpB)
	if l > 0 {
		n += 1 + l + sovQna(uint64(l))
	}
	l = len(m.OpC)
	if l > 0 {
		n += 1 + l + sovQna(uint64(l))
	}
	l = len(m.OpD)
	if l > 0 {
		n += 1 + l + sovQna(uint64(l))
	}
	l = len(m.Reward)
	if l > 0 {
		n += 1 + l + sovQna(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQna(uint64(l))
	}
	return n
}

func sovQna(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQna(x uint64) (n int) {
	return sovQna(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Qna) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQna
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Qna: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Qna: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQna
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQna
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQna
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qsh", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQna
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQna
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQna
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qsh = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQna
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQna
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQna
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQna
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQna
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQna
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Question = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpA", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQna
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQna
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQna
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpA = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpB", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQna
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQna
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQna
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpB = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpC", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQna
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQna
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQna
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpC = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpD", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQna
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQna
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQna
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpD = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQna
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQna
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQna
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQna
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQna
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQna
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQna(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQna
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQna(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQna
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQna
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQna
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQna
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQna
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQna
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQna        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQna          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQna = fmt.Errorf("proto: unexpected end of group")
)
